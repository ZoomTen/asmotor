# Shamelessly ripped from Furnace

name: Build asmotor

on:
  push:
    branches: master
  pull_request:
    branches: master

defaults:
  run:
    shell: bash

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        config:
          - { name: 'Windows MinGW x86', os: ubuntu-20.04, compiler: mingw, arch: x86 }
          - { name: 'Windows MinGW x86_64', os: ubuntu-20.04, compiler: mingw, arch: x86_64 }
          - { name: 'Linux x86_64', os: ubuntu-20.04, arch: x86_64 }
      fail-fast: false

    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4.1.1
      with:
        submodules: recursive

    - name: Set Windows arch identifiers
      id: windows-identify
      if: ${{ matrix.config.compiler == 'msvc' || matrix.config.compiler == 'mingw' }}
      run: |
        vswhere_target="${{ matrix.config.arch }}"
        msvc_target="${{ matrix.config.arch }}"
        mingw_target="${{ matrix.config.arch }}"

        if [ '${{ matrix.config.arch }}' == 'x86' ]; then
          msvc_target="Win32"
        elif [ '${{ matrix.config.arch }}' == 'x86_64' ]; then
          vswhere_target="amd64"
          msvc_target="x64"
        fi

        if [ '${{ matrix.config.compiler }}' == 'msvc' ]; then
          echo "vswhere target: ${vswhere_target}"
          echo "MSVC target: ${msvc_target}"
        else
          echo "MinGW cross target: ${mingw_target}"
        fi

        echo "vswhere-target=${vswhere_target}" >> $GITHUB_OUTPUT
        echo "msvc-target=${msvc_target}" >> $GITHUB_OUTPUT
        echo "mingw-target=${mingw_target}" >> $GITHUB_OUTPUT

    - name: Set package identifier
      id: package-identify
      run: |
        package_name="asmotor-$(git rev-parse --short HEAD)"
        if [ '${{ runner.os }}' == 'Windows' ] || [ '${{ matrix.config.compiler }}' == 'mingw' ]; then
          package_name="${package_name}-win"
          if [ '${{ matrix.config.compiler }}' == 'mingw' ]; then
            package_name="${package_name}-mingw"
          else
            package_name="${package_name}-msvc"
          fi
          package_name="${package_name}-${{ matrix.config.arch }}"
        elif [ '${{ runner.os }}' == 'macOS' ]; then
          package_name="${package_name}-macos-${{ matrix.config.arch }}"
        else
          package_name="${package_name}-linux-${{ matrix.config.arch }}"
        fi
        echo "Package identifier: ${package_name}"
        echo "Package file: ${package_name}${package_ext}"
        echo "id=${package_name}" >> $GITHUB_OUTPUT

    - name: Set build cores amount
      id: build-cores
      run: |
        # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
        amount=2
        if [ '${{ runner.os }}' == 'macOS' ]; then
          amount=3
        fi
        echo "Amount of cores we can build with: ${amount}"
        echo "amount=${amount}" >> $GITHUB_OUTPUT

    - name: Setup Toolchain [Windows MinGW]
      if: ${{ matrix.config.compiler == 'mingw' }}
      run: |
        sudo apt-get update
        sudo apt-get -y install \
          mingw-w64 \
          mingw-w64-tools

    - name: Configure
      run: |
        if [ '${{ matrix.config.compiler }}' == 'mingw' ]; then
          CMAKE_EXTRA_ARGS+=('-DCMAKE_TOOLCHAIN_FILE=.github/cmake/mingw-${{ steps.windows-identify.outputs.mingw-target }}.cmake')
        fi
        cmake \
          -B ${PWD}/built \
          -DCMAKE_INSTALL_PREFIX=/ \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DASMOTOR_VERSION=$(cat ${PWD}/build/version) \
          "${CMAKE_EXTRA_ARGS[@]}"

    - name: Build
      run: |
        cmake \
          --build ${PWD}/built \
          --config ${{ env.BUILD_TYPE }} \
          --parallel ${{ steps.build-cores.outputs.amount }}

    - name: Package [Windows]
      if: ${{ runner.os == 'Windows' || matrix.config.compiler == 'mingw' }}
      run: |
        mkdir -p target/motor
        make -C ${PWD}/built DESTDIR=${PWD}/target/motor install

    - name: Package [Linux]
      if: ${{ runner.os == 'Linux' && matrix.config.compiler != 'mingw' }}
      run: |
        mkdir -p target/motor
        make -C ${PWD}/built DESTDIR=${PWD}/target/motor install

    - name: Upload artifact
      if: ${{ github.ref_name == 'master' }}
      uses: actions/upload-artifact@v4.3.0
      with:
        name: ${{ steps.package-identify.outputs.id }}
        path: target/motor/bin/
